{"id": "546", "post": "<div class=\"post-546 post type-post status-publish format-standard hentry category-tutorials\" id=\"post-546\"><h2 class=\"storytitle\"><a href=\"https://lowendbox.com/blog/reduce-stack-limit-for-multi-thread-apps/\" rel=\"bookmark\">Reduce Stack Limit for Multi-Thread Apps</a></h2><div class=\"meta\"><img data-lazyloaded=\"1\" src=\"https://lowendbox.com/media/icons/calendar.png\" data-src=\"https://lowendbox.com/media/icons/calendar.png\" alt=\"Date/Time: \" class=\"litespeed-loaded\" data-was-processed=\"true\"> December 5, 2009 @ 12:32 pm, by LowEndAdmin</div><div class=\"storycontent tablelook\"><p>Just a small tips for those trying to run multiple threaded applications on OpenVZ.</p><p>Personally I code quite a few multi-threaded applications in Python (as some things are just too hard to do asynchronisely). Very often a 6MB RSS application would eat up close to 100MB of VSZ. As one of the most important metrics on OpenVZ \u2014 not \u201cguaranteed memory\u201d but \u201cburstable memory\u201d, i.e. <code>privvmpages</code> \u2014 is counted on how much your processes have <em>allocated</em>, you\u2019ll soon find your application, which actually only use 6MB of \u201creal memory\u201d, quickly died on your 64MB VPS with 128MB of burstable memory.</p><p>The same applies to many other multi-threaded applications that use the default stack size when creating threads. I use <a href=\"http://www.phys.uu.nl/~rombouts/pdnsd.html\">pdnsd</a> as a local DNS resolver/cache. A fresh start on Debian would show to use around 1MB RSS but <b>51MB VSZ</b>!</p><pre class=\"code\">$ <b>ps -u pdnsd u</b>\nUSER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\npdnsd    32521  0.0  0.3  51436   976 ?        Sl   23:12   0:00 /usr/sbin/pdnsd\n</pre><p>It turns out that for multi-threaded applications, each thread will be allocated 8MB of stack (although not actually used). The allocated stack actually counts against <code>privvmpages</code> in user beancounters, i.e. against your \u201cburstable memory\u201d. That sucks. Which is why I much prefer a Xen VPS which has a proper memory accounting!</p><p>So the trick is reducing the stack size so not much will be allocated for each of the threads. In many cases, you don\u2019t need that much stack (applications should <code>malloc</code> instead of assuming a big stack is available). So let\u2019s reduce the stack size (with <code>ulimit -s</code>) and see how much memory you can save.</p><pre class=\"code\"># <b>ulimit -s 256</b>\n# <b>/etc/init.d/pdnsd restart</b>\n...\n# <b>ps -u pdnsd u</b>\nUSER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\npdnsd     3261  0.0  0.3   3308   916 ?        Sl   23:24   0:00 /usr/sbin/pdnsd\n</pre><p>There we go. From 51MB to 3.3MB. You should see a huge drop under the <code>held</code> column of <code>privvmpages</code> as well under <code>/proc/user_beancounters</code>!</p><p>You can pretty much use <code>ulimit -s</code> to limit the stack size of any application but I found it\u2019s only really effectively on multi-threaded applications on OpenVZ. To find out which apps are multi-threaded, you can use <code>`ps auxm`</code> to list not just the processes but also threads. Add the limit before you start the service, or put the ulimit line inside the RC file. You\u2019ll find that you can now squeeze more into your low end box :)</p><p class=\"dpsp-share-text\"></p><div id=\"dpsp-content-bottom\" class=\"dpsp-content-wrapper dpsp-shape-rounded dpsp-column-auto dpsp-has-spacing dpsp-no-labels dpsp-show-on-mobile dpsp-button-style-1 dpsp-has-icon-background dpsp-has-button-background dpsp-show-total-share-count dpsp-show-total-share-count-after\"><ul class=\"dpsp-networks-btns-wrapper dpsp-networks-btns-content dpsp-has-button-icon-animation\"><li><a rel=\"nofollow\" href=\"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Flowendbox.com%2Fblog%2Freduce-stack-limit-for-multi-thread-apps%2F&amp;t=Reduce%20Stack%20Limit%20for%20Multi-Thread%20Apps\" class=\"dpsp-network-btn dpsp-facebook dpsp-no-label dpsp-first\" title=\"Share on Facebook\"><span class=\"dpsp-network-icon\"></span><span class=\"dpsp-network-label-wrapper\"></span></a></li><li><a rel=\"nofollow\" href=\"https://twitter.com/intent/tweet?text=Reduce%20Stack%20Limit%20for%20Multi-Thread%20Apps&amp;url=https%3A%2F%2Flowendbox.com%2Fblog%2Freduce-stack-limit-for-multi-thread-apps%2F&amp;via=LowEndNetwork\" class=\"dpsp-network-btn dpsp-twitter dpsp-no-label\" title=\"Share on Twitter\"><span class=\"dpsp-network-icon\"></span><span class=\"dpsp-network-label-wrapper\"></span></a></li><li><a rel=\"nofollow\" href=\"https://www.linkedin.com/shareArticle?url=https%3A%2F%2Flowendbox.com%2Fblog%2Freduce-stack-limit-for-multi-thread-apps%2F&amp;title=Reduce%20Stack%20Limit%20for%20Multi-Thread%20Apps&amp;mini=true\" class=\"dpsp-network-btn dpsp-linkedin dpsp-no-label dpsp-last\" title=\"Share on LinkedIn\"><span class=\"dpsp-network-icon\"></span><span class=\"dpsp-network-label-wrapper\"></span></a></li></ul><div class=\"dpsp-total-share-wrapper\"><span class=\"dpsp-icon-total-share\"></span><span class=\"dpsp-total-share-count\">0</span><span>shares</span></div></div><div id=\"author-bio-box\" style=\"background: #f8f8f8; border-top: 2px solid #cccccc; border-bottom: 2px solid #cccccc; color: #333333\"><h3><a style=\"color: #555555;\" href=\"https://lowendbox.com/blog/author/admin/\" title=\"All posts by LowEndAdmin\" rel=\"author\">LowEndAdmin</a></h3><div class=\"bio-gravatar\"><img data-lazyloaded=\"1\" src=\"https://secure.gravatar.com/avatar/11a4d9191634a9374eeca7d0e8982ba2?s=70&amp;d=retro&amp;r=pg\" alt=\"\" data-src=\"https://secure.gravatar.com/avatar/11a4d9191634a9374eeca7d0e8982ba2?s=70&amp;d=retro&amp;r=pg\" data-srcset=\"https://secure.gravatar.com/avatar/11a4d9191634a9374eeca7d0e8982ba2?s=140&amp;d=retro&amp;r=pg 2x\" class=\"avatar avatar-70 photo litespeed-loaded\" height=\"70\" width=\"70\" loading=\"lazy\" srcset=\"https://secure.gravatar.com/avatar/11a4d9191634a9374eeca7d0e8982ba2?s=140&amp;d=retro&amp;r=pg 2x\" data-was-processed=\"true\"></div><p class=\"bio-description\">The original owner of LowEndBox known as \"LowEndAdmin\" or \"LEA\" for short founded LowEndBox in 2008 and created the concept of hosting applications on low resource \"Low End Boxes\". After creating the roots of the community that we know today, \"LEA\" stepped aside and allowed others to carry the torch forward.</p></div></div><div class=\"feedback\"></div></div>"}